blueprint:
  name:  Plant Care by mvso
  description: v1.0.0 ‚Äì Configurable alert time + light duration tracking
  domain: automation
  input:
    plant_type:
      name: Plant Type
      description: Select the plant type
      selector:
        select:
          options:
            - Chili
            - Citrus
            - Ficus
            - dummy
            - dummy2
            - dummy3

    growth_stage:
      name: Growth Stage
      description: Select the growth stage
      selector:
        select:
          options:
            - Cutting
            - Dormant
            - Fruiting
            - Mature
            - Seed
            - Sprout
            - Young

    lux_sensor:
      name: Light Intensity Sensor
      selector:
        entity:
          domain: sensor

    awc_sensor:
      name: Soil Moisture Sensor (AWC)
      selector:
        entity:
          domain: sensor

    temperature_sensor:
      name: Temperature Sensor
      selector:
        entity:
          domain: sensor

    humidity_sensor:
      name: Humidity Sensor
      selector:
        entity:
          domain: sensor

    notify_target:
      name: Notify Target
      description: Select the notification service to use
      default: notify.mobile_app_martins16pro
      selector:
        text:

    alert_time:
      name: Daily Alert Time (HH:MM:SS)
      default: "18:00:00"
      selector:
        time:

 
trigger:
  - platform: time_pattern
    minutes: "/15"
  - platform: time
    at: !input alert_time


variables:
  month: "{{ now().strftime('%B') }}"
  data: "{{ state_attr('sensor.plant_data', 'data') }}"
  thresholds: "{{ data[plant_type][growth_stage][month] }}"
  lux: "{{ states(lux_sensor) | float }}"
  awc: "{{ states(awc_sensor) | float }}"
  temp: "{{ states(temperature_sensor) | float }}"
  hum: "{{ states(humidity_sensor) | float }}"
  light_duration_actual: "{{ states(light_duration_sensor) | float }}"
  light_duration_expected: "{{ thresholds.light_duration.optimal }}"
  care_summary: "{{ thresholds.care_summary }}"

  alerts: >
    {% set issues = [] %}
    {% if lux < thresholds.lux.min or lux > thresholds.lux.max %}
      {% set issues = issues + ['‚ö†Ô∏è Light intensity out of range'] %}
    {% endif %}
    {% if light_duration_actual < thresholds.light_duration.min %}
      {% set issues = issues + ['‚ö†Ô∏è Light duration too short'] %}
    {% elif light_duration_actual > thresholds.light_duration.max %}
      {% set issues = issues + ['‚ö†Ô∏è Light duration too long'] %}
    {% endif %}
    {% if awc < thresholds.awc.min or awc > thresholds.awc.max %}
      {% set issues = issues + ['‚ö†Ô∏è Soil moisture out of range'] %}
    {% endif %}
    {% if temp < thresholds.temperature.min or temp > thresholds.temperature.max %}
      {% set issues = issues + ['‚ö†Ô∏è Temperature out of range'] %}
    {% endif %}
    {% if hum < thresholds.humidity.min or hum > thresholds.humidity.max %}
      {% set issues = issues + ['‚ö†Ô∏è Humidity out of range'] %}
    {% endif %}
    {{ issues }}

condition: []

action:
  - choose:
      - conditions: "{{ alerts | length > 0 }}"
        sequence:
          - service: input_text.set_value
            data:
              entity_id: input_text.plant_alert_text
              value: "{{ alerts | join(', ') }}"
          - service: "{{ notify_target }}"
            data:
              message: "üö® Plant Alert: {{ alerts | join(', ') }}"
      - conditions: "{{ alerts | length == 0 }}"
        sequence:
          - service: input_text.set_value
            data:
              entity_id: input_text.plant_alert_text
              value: ""
          - service: "{{ notify_target }}"
            data:
              message: "‚úÖ All plant parameters are within optimal range."

mode: single


  